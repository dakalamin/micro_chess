; PlatformIO Project Configuration File
;
;  Build options:    build flags, source filter
;  Upload options:   custom upload port, speed and extra flags
;  Library options:  dependencies, extra library storages
;  Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html


; (!) TO CHECK IF ALL SECTIONS ARE CONFIGURED CORRECTLY
; (!) FOR EXAMPLE extends OR values interpolation
; (!) RUN >> pio project config
; (!) OR
; (!) RUN >> pio run -t envdump [-e ENVNAME]
; https://docs.platformio.org/en/latest/core/userguide/cmd_run.html#cmdoption-pio-run-list-targets


[platformio]
name = micro_chess


; ---------------- CONSTANTS SECTION -----------------

[constants]
prefix = MCH_
type_sections = 
    platform-type
    build-type
    mode

; ---------------- PLATFORM SECTIONS ----------------

[arduino] ; ARDUINO_ARCH_AVR is defined here
platform  = atmelavr
framework = arduino

[arduino:uno] ; ARDUINO_AVR_UNO is defined here
extends = arduino
board   = uno

[arduino:nano] ; ARDUINO_AVR_NANO is defined here
extends = arduino
board   = nanoatmega328


; ------------- PLATFROM TYPE SECTIONS --------------

[platform-type:embedded]
; (!) CHANGE MANUALLY TO arduino:uno / arduino:nano / etc.
; (!) DEPENDING ON WHICH PLATFORM YOU INTEND TO USE
extends = arduino:uno
build_flags =
    -D ${constants.prefix}EMBEDDED
; About Baud Rate - https://en.wikipedia.org/wiki/Serial_port#Settings
monitor_speed   = 115200
monitor_echo    = yes
monitor_filters = 
	send_on_enter
	colorize
test_filter = test_embedded

[platform-type:native]
platform    = native
build_flags =
    -D ${constants.prefix}NATIVE
lib_deps    = throwtheswitch/Unity
test_filter = test_native


; --------------- BUILD TYPE SECTIONS ---------------

[build-type:release]
build_type  = release
build_flags =
    -D ${constants.prefix}RELEASE
test_ignore = *

[build-type:debug]
build_type = debug
debug_build_flags = 
    -D ${constants.prefix}DEBUG
	-Og
	-g2
test_ignore = *

[build-type:test]
build_type  = test
build_flags =
    -D ${constants.prefix}TEST


; -------------- SPECIAL MODE SECTIONS --------------

[mode:verbose]
build_flags = 
    -D ${constants.prefix}VERBOSE


; ------------------ ENV SECTIONS -------------------

[env]
build_unflags = -std=gnu++11
; Options to Request or Suppress Warnings - https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html
build_flags =
	-std=gnu++17
	; Do not warn when a switch statement has an index of enumerated type
	; and lacks a case for one or more of the named codes of that enumeration.
	; (The presence of a default label prevents this warning.)
	; case labels outside the enumeration range also provoke warnings
	; when this option is not used (even if there is a default label).
	-Wno-switch
	; Do not warn when the sizeof operator is applied to a parameter
	; that is declared as an array in a function definition.
	-Wno-sizeof-array-argument

[env:embedded-debug]
extends =
    platform-type:embedded
    build-type:debug
build_flags =
    ${env.build_flags}
    ${platform-type:embedded.build_flags}
debug_build_flags =
    ${build-type:debug.debug_build_flags}
    -D AVR8_BREAKPOINT_MODE=1
; (!) CHANGE COM PORT MANUALLY TO THE ONE ARDUINO IS CONNECTED TO
debug_port       = COM3
debug_tool       = avr-stub
debug_extra_cmds = set debug remote 1
; avr-debug docs - https://github.com/jdolinay/avr_debug/blob/master/doc/avr_debug.pdf
lib_deps         = jdolinay/avr-debugger

[env:embedded-release]
extends = 
    platform-type:embedded
    build-type:release
build_flags =
    ${env.build_flags}
    ${platform-type:embedded.build_flags}
    ${build-type:release.build_flags}

[env:embedded-release-verbose]
extends = env:embedded-release
build_flags =
    ${env:embedded-release.build_flags}
    ${mode:verbose.build_flags}

[env:test-embedded]
extends =
    platform-type:embedded
    build-type:test
build_flags =
    ${env.build_flags}
    ${platform-type:embedded.build_flags}
    ${build-type:test.build_flags}

[env:test-native]
extends =
    platform-type:native
    build-type:test
build_flags =
    ${env.build_flags}
    ${platform-type:native.build_flags}
    ${build-type:test.build_flags}